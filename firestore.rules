rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - المستخدمون
    // Users can only read and write their own data
    // يمكن للمستخدمين قراءة وكتابة بياناتهم فقط
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Test usage collection - استخدام الاختبارات
    // Users can only access their own test usage data
    // يمكن للمستخدمين الوصول لبيانات استخدام اختباراتهم فقط
    match /testUsage/{document} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.uid;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.uid;
    }
    
    // Subscription data - بيانات الاشتراكات
    // Users can read their subscription data, only system can write
    // يمكن للمستخدمين قراءة بيانات اشتراكهم، النظام فقط يمكنه الكتابة
    match /subscriptions/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && 
        request.auth.uid == userId &&
        request.auth.token.admin == true; // Only admin can modify subscriptions
    }
    
    // Chemical tests collection - مجموعة الاختبارات الكيميائية
    // Read access for authenticated users, write access for admins only
    // قراءة للمستخدمين المصادق عليهم، كتابة للمديرين فقط
    match /chemical_tests/{testId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        (request.auth.token.admin == true ||
         request.auth.token.email in [
           'aburakan4551@gmail.com',
           'admin@example.com'
         ]);
    }

    // STC Subscriptions collection - مجموعة اشتراكات STC
    // Users can read their own subscriptions, admins can read/write all
    // يمكن للمستخدمين قراءة اشتراكاتهم، المديرين يمكنهم قراءة/كتابة الكل
    match /stc_subscriptions/{subscriptionId} {
      allow read: if request.auth != null &&
        (request.auth.uid == resource.data.userId ||
         request.auth.token.admin == true ||
         request.auth.token.email in [
           'aburakan4551@gmail.com',
           'admin@example.com'
         ]);
      allow write: if request.auth != null &&
        (request.auth.token.admin == true ||
         request.auth.token.email in [
           'aburakan4551@gmail.com',
           'admin@example.com'
         ]);
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.userId;
    }

    // STC Payment History collection - مجموعة تاريخ مدفوعات STC
    // Users can read their own payment history, admins can read/write all
    // يمكن للمستخدمين قراءة تاريخ مدفوعاتهم، المديرين يمكنهم قراءة/كتابة الكل
    match /stc_payment_history/{paymentId} {
      allow read: if request.auth != null &&
        (request.auth.uid == resource.data.userId ||
         request.auth.token.admin == true ||
         request.auth.token.email in [
           'aburakan4551@gmail.com',
           'admin@example.com'
         ]);
      allow write: if request.auth != null &&
        (request.auth.token.admin == true ||
         request.auth.token.email in [
           'aburakan4551@gmail.com',
           'admin@example.com'
         ]);
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.userId;
    }

    // Admin Settings collection - مجموعة إعدادات المدير
    // Only admins can access admin settings
    // المديرين فقط يمكنهم الوصول لإعدادات المدير
    match /admin_settings/{settingId} {
      allow read, write: if request.auth != null &&
        (request.auth.token.admin == true ||
         request.auth.token.email in [
           'aburakan4551@gmail.com',
           'admin@example.com'
         ]);
    }

    // User test history - سجل اختبارات المستخدم
    // Users can only access their own test history
    // يمكن للمستخدمين الوصول لسجل اختباراتهم فقط
    match /user_test_history/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;

      // Allow access to subcollections within user's history
      match /tests/{testId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        allow create: if request.auth != null && request.auth.uid == userId;
      }
    }

    // User profiles collection - ملفات المستخدمين الشخصية
    // Users can only access their own profile
    // يمكن للمستخدمين الوصول لملفهم الشخصي فقط
    match /user_profiles/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    // Test changes log - سجل تغييرات الاختبارات
    // Admin only access
    // وصول المديرين فقط
    match /test_changes/{document} {
      allow read, write: if request.auth != null &&
        (request.auth.token.admin == true ||
         request.auth.token.email in [
           'aburakan4551@gmail.com',
           'admin@example.com'
         ]);
    }
    
    // Test results collection - نتائج الاختبارات
    // Users can only access their own test results
    // يمكن للمستخدمين الوصول لنتائج اختباراتهم فقط
    match /test_results/{resultId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // Test sessions collection - جلسات الاختبار
    // Users can only access their own test sessions
    // يمكن للمستخدمين الوصول لجلسات اختبارهم فقط
    match /test_sessions/{sessionId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // Activity logs - سجلات النشاط
    // Users can read their own activity, admins can read all
    // يمكن للمستخدمين قراءة نشاطهم، المديرين يمكنهم قراءة الكل
    match /activity_logs/{logId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.token.admin == true);
      allow create: if request.auth != null;
    }
    
    // Admin data - بيانات المدير
    // Only admins can access admin data
    // المديرين فقط يمكنهم الوصول لبيانات المدير
    match /admin/{document=**} {
      allow read, write: if request.auth != null && 
        request.auth.token.admin == true;
    }
    
    // Public data - البيانات العامة
    // Read-only access for all authenticated users
    // قراءة فقط لجميع المستخدمين المصادق عليهم
    match /public/{document=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.token.admin == true;
    }
    
    // TEMPORARY DEVELOPMENT RULES - قواعد التطوير المؤقتة
    // WARNING: These rules are for development only and should be restricted in production
    // تحذير: هذه القواعد للتطوير فقط ويجب تقييدها في الإنتاج

    // Allow read access to all collections for authenticated users (DEVELOPMENT ONLY)
    // السماح بالقراءة لجميع المجموعات للمستخدمين المصادق عليهم (للتطوير فقط)
    match /{collection}/{document} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        (request.auth.token.admin == true ||
         request.auth.token.email in [
           'aburakan4551@gmail.com',
           'admin@example.com'
         ] ||
         request.auth.uid == 'development-user');
    }

    // Default deny rule for unmatched paths - قاعدة الرفض الافتراضية للمسارات غير المطابقة
    // This should be the last rule
    // يجب أن تكون هذه القاعدة الأخيرة
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// Helper functions - دوال مساعدة
function isAuthenticated() {
  return request.auth != null;
}

function isOwner(userId) {
  return request.auth != null && request.auth.uid == userId;
}

function isAdmin() {
  return request.auth != null && request.auth.token.admin == true;
}

function isValidUser() {
  return request.auth != null && 
         request.auth.uid != null && 
         request.auth.uid.size() > 0;
}
